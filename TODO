
* gettext i18n

gettextize --dry-run

cd lisp

xgettext --keyword=message *.el **/*.el

  xgettext: Non-ASCII string at calendar/cal-bahai.el:149.
            Please specify the source encoding through --from-code.
       (message "Date is pre-BahÃ¡â€™Ã­")
     (message "BahÃ¡â€™Ã­ date: %s" s)

xgettext --from-code=UTF-8 -kformat-message -kmessage -kerror -ktramp-message -ktramp-error -kngettext:1,2 *.el **/*.el

 #: replace.el:986
 #, elisp-format
-msgid "Deleted %d matching lines"
-msgstr ""
+msgid "Deleted %d matching line"
+msgid_plural "Deleted %d matching lines"
+msgstr[0] ""
+msgstr[1] ""

xgettext --from-code=UTF-8 -kformat-message -kmessage -kerror -ktramp-message -ktramp-error gnus/*.el -o gnus_messages.po

xgettext --from-code=UTF-8 -kmenu-item *.el **/*.el -o menus.po

 #: menu-bar.el:91
 msgid "New Window on Right"
 msgstr ""

xgettext --from-code=UTF-8 -kdefcustom:3 -kdefvar:3 -kdefun:3 *.el **/*.el -o docstrings.po

 #: isearch.el:178
 msgid "Function(s) to call after isearch has found matches in the buffer."
 msgstr ""


(replace-regexp-in-string
 "%d" "\\\\([0-9]+\\\\)"
 (regexp-opt '("finished with %d match found"
               "finished with %d matches found"
               "finished with no matches found")))
"\\(?:finished with \\(?:\\(?:\\([0-9]+\\) match\\(?:es\\)?\\|no matches\\) found\\)\\)"


(info "(gettext) gettext grok")
     What happens now when the value for, say, â€˜LANGUAGEâ€™ changes?
     According to the process explained above the new value of this
     variable is found as soon as the â€˜dcgettextâ€™ function is called.
     But this also means the (perhaps) different message catalog file is
     loaded.  In other words: the used language is changed.


dpkg -L 'xemacs21-mulesupport'
/etc/X11/de/app-defaults/XEmacs
! *XlwMenu.file.labelString:               %_File
*XlwMenu.file.labelString:                 Datei (%_F)

sudo locale-gen de_DE.utf8
??? LANG=de_DE xemacs -q



need new display action (direction . right)
with optional parameter (create-window . t)
like windmove-create-window

TRY to use it for 'C-z d' (vc-dir-in-project-root)


FIXED:
in single-window frame eval shows Local Variables in right-hand window!

the same problem with *Marked Process*:
in horizontall split windows
select a process in Proced, type 'k',
it displays *Marked Process* in adjacent window,
not at bottom!


xref-find-definitions
M-. doesn't work well with windowmove, e.g.

<H-M-right> M-. displays xref in the specified window
but RET still displayed in the original window

The problem occurs only when *xref* appears whem unasked for.

M-? xref-find-references RET pops up a large buffer

C-M-. xref-find-apropos RET jumps immediately
C-M-. apropos RET pops up a large buffer


Chrome clones the frame, not makes the frame


async-shell-command truncates output lines
bug: M-& ps aux RET
ok:  M-! ps aux RET
another example: dpkg -l '*emacs*'
So the question is: why async-shell-command limits COLUMNS to 80, even on wide frames,
whereas M-! has no limitation.

M-x shell limits COLUMNS to window-width


Escape sequences for bottom progress bar are unhandled in shell:

sudo apt install jq
[sudo] password for juri:
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  libjq1 libonig4
The following NEW packages will be installed:
  jq libjq1 libonig4
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 276 kB of archives.
After this operation, 930 kB of additional disk space will be used.
Do you want to continue? [Y/n]
Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libonig4 amd64 6.7.0-1 [119 kB]
Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libjq1 amd64 1.5+dfsg-2 [111 kB]
Get:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 jq amd64 1.5+dfsg-2 [45,6 kB]
Fetched 276 kB in 0s (707 kB/s)
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or without a controlling terminal.)
debconf: falling back to frontend: Readline

78Selecting previously unselected package libonig4:amd64.
(Reading database ... 325210 files and directories currently installed.)
Preparing to unpack .../libonig4_6.7.0-1_amd64.deb ...
7Progress: [  0%] [................................................................................................] 87Progress: [  6%] [######..........................................................................................] 8Unpacking libonig4:amd64 (6.7.0-1) ...
7Progress: [ 13%] [############....................................................................................] 87Progress: [ 19%] [##################..............................................................................] 8Selecting previously unselected package libjq1:amd64.
Preparing to unpack .../libjq1_1.5+dfsg-2_amd64.deb ...
7Progress: [ 25%] [########################........................................................................] 8Unpacking libjq1:amd64 (1.5+dfsg-2) ...
7Progress: [ 31%] [##############################..................................................................] 87Progress: [ 38%] [####################################............................................................] 8Selecting previously unselected package jq.
Preparing to unpack .../jq_1.5+dfsg-2_amd64.deb ...
7Progress: [ 44%] [##########################################......................................................] 8Unpacking jq (1.5+dfsg-2) ...
7Progress: [ 50%] [################################################................................................] 87Progress: [ 56%] [######################################################..........................................] 8Setting up libonig4:amd64 (6.7.0-1) ...
7Progress: [ 63%] [############################################################....................................] 87Progress: [ 69%] [##################################################################..............................] 8Setting up libjq1:amd64 (1.5+dfsg-2) ...
7Progress: [ 75%] [########################################################################........................] 87Progress: [ 81%] [##############################################################################..................] 8Processing triggers for libc-bin (2.27-3ubuntu1) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
Setting up jq (1.5+dfsg-2) ...
7Progress: [ 88%] [####################################################################################............] 87Progress: [ 94%] [##########################################################################################......] 8
78


Add support for --color-moved
https://github.com/magit/magit/issues/3424
https://github.blog/2018-04-05-git-217-released/#coloring-moved-code


https://github.com/magit/magit/issues/3716
https://github.com/magit/magit/commit/512790bb7119dabcd90a0695a0b506e315d72c2e
https://emacs.stackexchange.com/questions/36071/magit-copy-text-from-stage-section-without-character/36090#36090



~/src/emacs/github/powerline

(setq powerline-default-separator 'rounded)

(pp mode-line-format)

(let* ((face0 'powerline-active0)
       (face1 'powerline-active1)
       (separator-left (intern (format "powerline-%s-%s"
                                       (powerline-current-separator)
                                       (car powerline-default-separator-dir))))
       (separator-right (intern (format "powerline-%s-%s"
                                        (powerline-current-separator)
                                        (cdr powerline-default-separator-dir))))
       (separator-left-image (funcall separator-left face0 face1))
       (separator-right-image (funcall separator-right face1 face0)))
  (insert (propertize "[" 'display separator-right-image)
          (propertize "]" 'display separator-left-image)))

(setq print-circle nil)
(macroexpand-all '(pl/rounded left))

(defalias 'powerline-rounded-left
  #'(lambda (face1 face2 &optional height)
      (if window-system
          (progn
            (unless height
              (setq height (pl/separator-height)))
            (let* ((color1 (if face1 (pl/hex-color (pl/background-color face1))))
                   (color2 (if face2 (pl/hex-color (pl/background-color face2))))
                   (colori (if (and color1 color2)
                               (pl/interpolate color1 color2)))
                   (color1 (or color1 "None"))
                   (color2 (or color2 "None"))
                   (colori (or colori "None"))
                   (pattern-height (max (- height 6) 0))
                   (second-pattern-height (/ pattern-height 2))
                   (pattern-height pattern-height)
                   (pattern-height-2x (max (- (* height 2) 12) 0))
                   (second-pattern-height-2x (/ pattern-height-2x 2))
                   (pattern-height-2x pattern-height-2x))
              (apply 'create-image
                     (concat
                      (format "/* XPM */ static char * %s_%s[] = { \"%s %s 3 1\", \"0 c %s\", \"1 c %s\", \"2 c %s\"," "rounded"
                              (symbol-name 'left) 6 height color1 color2 colori)
                      (mapconcat 'identity
                                 '("\"211111\"," "\"002111\"," "\"000011\"," "\"000021\"," "\"000001\"," "\"000002\",")
                                 "")
                      (mapconcat 'identity
                                 (cl-subseq '("\"000000\"," "\"000000\"," "\"000000\"," "\"000000\"," "\"000000\"," "\"000000\",") 0 pattern-height)
                                 "")
                      nil nil nil "};")
                     'xpm t :ascent 'center :face
                     (if
                         (and face1 face2)
                         (progn face2))
                     (and
                      (featurep 'mac)
                      (list :data-2x
                            (concat
                             (format "/* XPM */ static char * %s_%s_2x[] = { \"%s %s 3 1\", \"0 c %s\", \"1 c %s\", \"2 c %s\"," "rounded"
                                     (symbol-name 'left)
                                     (* 6 2)
                                     (* height 2)
                                     color1 color2 colori)
                             (mapconcat 'identity
                                        '("\"111111111111\"," "\"002111111111\"," "\"000011111111\"," "\"000000111111\"," "\"000000021111\"," "\"000000001111\"," "\"000000000111\"," "\"000000000011\"," "\"000000000011\"," "\"000000000021\"," "\"000000000001\"," "\"000000000001\",")
                                        "")
                             (mapconcat 'identity
                                        (cl-subseq
                                         '("\"000000000000\"," "\"000000000000\"," "\"000000000000\"," "\"000000000000\"," "\"000000000000\"," "\"000000000000\",")
                                         0 pattern-height-2x)
                                        "")
                             nil nil nil "};")))))))))



