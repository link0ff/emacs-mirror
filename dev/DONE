
* compilation errors in mode-line

Maybe parse compilation on process output only when counters are presented in the mode-line?
Actually, compilation-mode-line-errors in mode-line-process is not easily customizable.


DOESN'T WORK:

(advice-add 'org-metaleft :around
            (lambda (orig-fun &rest args)
              (message "1! my-go-back")
              (cl-flet ((backward-word (&optional arg) (interactive "^p") (message "my-go-back") (my-go-back)))
                ;; (call-interactively 'backward-word)
                ;; (backward-word)
                (apply orig-fun args)))
            '((name . override-org-metaleft-backward-word)))

(require 'cl)
(letf ((backward-word (&optional arg) (interactive "^p") (message "my-go-back")))
  (call-interactively 'backward-word)
  ;; (backward-word)
  )

(cl-labels ((backward-word (&optional arg) (interactive "^p") (message "my-go-back")))
  ;; (call-interactively 'backward-word)
  (backward-word)
  )

(cl-letf ((backward-word (lambda (&optional arg) (interactive "^p") (message "my-go-back"))))
  ;; (call-interactively 'backward-word)
  (backward-word)
  )

(cl-flet ((backward-word (&optional arg) (interactive "^p") (message "my-go-back")))
  ;; (call-interactively 'backward-word)
  (backward-word)
  )

(cl-flet ((backward-word (&optional arg) (interactive "^p") (message "my-go-back")))
  (message "%S" (indirect-function 'backward-word t))
  (call-interactively 'backward-word)
  ;; (backward-word)
  )

(cl-flet ((backward-word (&optional arg) (interactive "^p") (message "my-go-back")))
  ;; (call-interactively 'backward-word)
  (funcall 'backward-word)
  )


