
FIND recent feature request for icon fonts:
Have you looked at https://github.com/domtronn/all-the-icons.el


TODO:
1. look wincows in desktop file
2. try to reproduce the next test case


* desktop frameset

Indeed something strange happens, here is a complete test case:

0. emacs -Q
1. C-h C-t   (view-emacs-todo)
2. C-x 5 2   (make-frame-command)
3. C-h C-n   (view-emacs-news)
4. C-x 5 o   (other-frame)
5. M-x desktop-save RET RET
6. C-x C-c

7. emacs -Q -f desktop-read --eval '(message "selected-frame %S" (selected-frame))'
8. M-: (selected-frame) RET

9. In the *Messages* buffer the printed selected-frame is not the same.
   See more explanations of messages in the *Messages* buffer below:

The next message comes from 'message' added to frameset.el:
frameset-restore frame-list (#<frame emacs@localhost 0x5572e78000c0> #<frame emacs@localhost 0x5572e71a9eb0>)

The next message comes from 'message' added to frameset.el:
frameset-restore selected-frame #<frame emacs@localhost 0x5572e71a9eb0>

The next message comes from desktop.el:
Desktop: 2 frames, 2 buffers restored.

The next message comes from 'message' added to desktop.el:
desktop-read selected-frame #<frame TODO 0x5572e71a9eb0>

The next message comes from 'message' on the command line:
selected-frame #<frame TODO 0x5572e71a9eb0>

The next message comes from 'message' added to startup.el:
normal-top-level #<frame TODO 0x5572e71a9eb0>

The next message comes from M-: (selected-frame):
#<frame  *Minibuf-1* 0x5572e78000c0>

Here 0x5572e71a9eb0 is the frame with TODO, and 0x5572e78000c0 with NEWS.
After loading the former should be selected.

But the 'message' added at the end of 'normal-top-level' shows one value
of selected-frame, and evaluating M-: (selected-frame) immedeately after loading
shows another value of selected-frame.  I don't know why, maybe the window manager
always selects the created frame?  (0x5572e71a9eb0 was reused, but 0x5572e78000c0
is a new frame created by frameset-restore).  Here is complete information:

In GNU Emacs 27.0.50 (build 84, x86_64-pc-linux-gnu, GTK+ Version 3.22.30)
 of 2019-08-13 built on localhost
Repository revision: 2b329ed420eb15f6738edd402697ac2876b2aa61
Repository branch: master
Windowing system distributor 'The X.Org Foundation', version 11.0.11906000
System Description: Linux Mint 19.1

Configured using:
 'configure --with-imagemagick'

Configured features:
XPM JPEG TIFF GIF PNG RSVG IMAGEMAGICK SOUND GPM DBUS GSETTINGS GLIB
NOTIFY INOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE HARFBUZZ M17N_FLT
LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS GTK3 X11 XDBE XIM THREADS PDUMPER
LCMS2 GMP

Important settings:
  value of $LC_MONETARY: fi_FI.UTF-8
  value of $LC_NUMERIC: fi_FI.UTF-8
  value of $LANG: en_US.UTF-8
  locale-coding-system: utf-8-unix

Major mode: Outline

Minor modes in effect:
  bug-reference-mode: t
  tooltip-mode: t
  global-eldoc-mode: t
  electric-indent-mode: t
  mouse-wheel-mode: t
  tool-bar-mode: t
  menu-bar-mode: t
  file-name-shadow-mode: t
  global-font-lock-mode: t
  font-lock-mode: t
  auto-composition-mode: t
  auto-encryption-mode: t
  auto-compression-mode: t
  buffer-read-only: t
  line-number-mode: t
  transient-mark-mode: t
  view-mode: t

Load-path shadows:
None found.

Features:
(shadow sort mail-extr emacsbug message rmc puny dired dired-loaddefs
format-spec rfc822 mml mml-sec password-cache epa derived epg epg-config
gnus-util rmail rmail-loaddefs text-property-search mm-decode mm-bodies
mm-encode mail-parse rfc2231 mailabbrev gmm-utils mailheader sendmail
rfc2047 rfc2045 ietf-drums mm-util mail-prsvr mail-utils cl-seq cl-extra
help-mode time-date subr-x goto-addr thingatpt seq byte-opt gv bytecomp
byte-compile cconv view vc-git diff-mode easymenu bug-reference noutline
outline easy-mmode desktop frameset cl-loaddefs cl-lib tooltip eldoc
electric uniquify ediff-hook vc-hooks lisp-float-type mwheel term/x-win
x-win term/common-win x-dnd tool-bar dnd fontset image regexp-opt fringe
tabulated-list replace newcomment text-mode elisp-mode lisp-mode
prog-mode register page menu-bar rfn-eshadow isearch timer select
scroll-bar mouse jit-lock font-lock syntax facemenu font-core
term/tty-colors frame cl-generic cham georgian utf-8-lang misc-lang
vietnamese tibetan thai tai-viet lao korean japanese eucjp-ms cp51932
hebrew greek romanian slovak czech european ethiopic indian cyrillic
chinese composite charscript charprop case-table epa-hook jka-cmpr-hook
help simple abbrev obarray minibuffer cl-preloaded nadvice loaddefs
button faces cus-face macroexp files text-properties overlay sha1 md5
base64 format env code-pages mule custom widget hashtable-print-readable
backquote threads dbusbind inotify lcms2 dynamic-setting
system-font-setting font-render-setting move-toolbar gtk x-toolkit x
multi-tty make-network-process emacs)

Memory information:
((conses 16 55782 4941)
 (symbols 48 7047 1)
 (strings 32 19182 1991)
 (string-bytes 1 619171)
 (vectors 16 11862)
 (vector-slots 8 157169 9776)
 (floats 8 36 26)
 (intervals 56 229 0)
 (buffers 992 13))


* gettext i18n

gettextize --dry-run

cd lisp

xgettext --keyword=message *.el **/*.el

  xgettext: Non-ASCII string at calendar/cal-bahai.el:149.
            Please specify the source encoding through --from-code.
       (message "Date is pre-Bahá’í")
     (message "Bahá’í date: %s" s)

xgettext --from-code=UTF-8 -kformat-message -kmessage -kerror -ktramp-message -ktramp-error -kngettext:1,2 *.el **/*.el

 #: replace.el:986
 #, elisp-format
-msgid "Deleted %d matching lines"
-msgstr ""
+msgid "Deleted %d matching line"
+msgid_plural "Deleted %d matching lines"
+msgstr[0] ""
+msgstr[1] ""

xgettext --from-code=UTF-8 -kformat-message -kmessage -kerror -ktramp-message -ktramp-error gnus/*.el -o gnus_messages.po

xgettext --from-code=UTF-8 -kmenu-item *.el **/*.el -o menus.po

 #: menu-bar.el:91
 msgid "New Window on Right"
 msgstr ""

xgettext --from-code=UTF-8 -kdefcustom:3 -kdefvar:3 -kdefun:3 *.el **/*.el -o docstrings.po

 #: isearch.el:178
 msgid "Function(s) to call after isearch has found matches in the buffer."
 msgstr ""


(replace-regexp-in-string
 "%d" "\\\\([0-9]+\\\\)"
 (regexp-opt '("finished with %d match found"
               "finished with %d matches found"
               "finished with no matches found")))
"\\(?:finished with \\(?:\\(?:\\([0-9]+\\) match\\(?:es\\)?\\|no matches\\) found\\)\\)"


(info "(gettext) gettext grok")
     What happens now when the value for, say, ‘LANGUAGE’ changes?
     According to the process explained above the new value of this
     variable is found as soon as the ‘dcgettext’ function is called.
     But this also means the (perhaps) different message catalog file is
     loaded.  In other words: the used language is changed.


dpkg -L 'xemacs21-mulesupport'
/etc/X11/de/app-defaults/XEmacs
! *XlwMenu.file.labelString:               %_File
*XlwMenu.file.labelString:                 Datei (%_F)

sudo locale-gen de_DE.utf8
??? LANG=de_DE xemacs -q



* display-buffer actions

need new display action (direction . right)
with optional parameter (create-window . t)
like windmove-create-window

TRY to use it for 'C-z d' (vc-dir-in-project-root)


Add support for --color-moved
https://github.com/magit/magit/issues/3424
https://github.blog/2018-04-05-git-217-released/#coloring-moved-code


https://github.com/magit/magit/issues/3716
https://github.com/magit/magit/commit/512790bb7119dabcd90a0695a0b506e315d72c2e
https://emacs.stackexchange.com/questions/36071/magit-copy-text-from-stage-section-without-character/36090#36090



* Tabs

frameset
tabset displayed in tabbar

~/emacs/tabs/awesome-tab/awesome-tab.el

It has such bug that clicking on window-tabs in another window
switches tabs in the selected window


** not exhaustive list of modes that use header-line thus whose buffer windows are unavailable for tabs:

bookmark-bmenu-list
diary-list-entries
electric-buffer-list
elp-results
erc
eww
gdb-breakpoints-mode
gdb-locals-mode
gdb-memory-mode
gdb-registers-mode
gdb-threads-mode
ibuffer
info
list-timers
mpc-status-mode
newsticker-treeview-list-mode
org-capture-mode
org-colview
org-src-mode
proced
profiler
rcirc
rst-toc-mode
ruler-mode
semantic-idle-breadcrumbs--display-in-header-line
ses
tabulated-list-init-header
url-cookie--generate-buffer


~/src/emacs/tabs/powerline/

(setq powerline-default-separator 'rounded)

(pp mode-line-format)

(let* ((face0 'powerline-active0)
       (face1 'powerline-active1)
       (separator-left (intern (format "powerline-%s-%s"
                                       (powerline-current-separator)
                                       (car powerline-default-separator-dir))))
       (separator-right (intern (format "powerline-%s-%s"
                                        (powerline-current-separator)
                                        (cdr powerline-default-separator-dir))))
       (separator-left-image (funcall separator-left face0 face1))
       (separator-right-image (funcall separator-right face1 face0)))
  (insert (propertize "[" 'display separator-right-image)
          (propertize "]" 'display separator-left-image)))

(setq print-circle nil)
(macroexpand-all '(pl/rounded left))

(defalias 'powerline-rounded-left
  #'(lambda (face1 face2 &optional height)
      (if window-system
          (progn
            (unless height
              (setq height (pl/separator-height)))
            (let* ((color1 (if face1 (pl/hex-color (pl/background-color face1))))
                   (color2 (if face2 (pl/hex-color (pl/background-color face2))))
                   (colori (if (and color1 color2)
                               (pl/interpolate color1 color2)))
                   (color1 (or color1 "None"))
                   (color2 (or color2 "None"))
                   (colori (or colori "None"))
                   (pattern-height (max (- height 6) 0))
                   (second-pattern-height (/ pattern-height 2))
                   (pattern-height pattern-height)
                   (pattern-height-2x (max (- (* height 2) 12) 0))
                   (second-pattern-height-2x (/ pattern-height-2x 2))
                   (pattern-height-2x pattern-height-2x))
              (apply 'create-image
                     (concat
                      (format "/* XPM */ static char * %s_%s[] = { \"%s %s 3 1\", \"0 c %s\", \"1 c %s\", \"2 c %s\"," "rounded"
                              (symbol-name 'left) 6 height color1 color2 colori)
                      (mapconcat 'identity
                                 '("\"211111\"," "\"002111\"," "\"000011\"," "\"000021\"," "\"000001\"," "\"000002\",")
                                 "")
                      (mapconcat 'identity
                                 (cl-subseq '("\"000000\"," "\"000000\"," "\"000000\"," "\"000000\"," "\"000000\"," "\"000000\",") 0 pattern-height)
                                 "")
                      nil nil nil "};")
                     'xpm t :ascent 'center :face
                     (if
                         (and face1 face2)
                         (progn face2))
                     (and
                      (featurep 'mac)
                      (list :data-2x
                            (concat
                             (format "/* XPM */ static char * %s_%s_2x[] = { \"%s %s 3 1\", \"0 c %s\", \"1 c %s\", \"2 c %s\"," "rounded"
                                     (symbol-name 'left)
                                     (* 6 2)
                                     (* height 2)
                                     color1 color2 colori)
                             (mapconcat 'identity
                                        '("\"111111111111\"," "\"002111111111\"," "\"000011111111\"," "\"000000111111\"," "\"000000021111\"," "\"000000001111\"," "\"000000000111\"," "\"000000000011\"," "\"000000000011\"," "\"000000000021\"," "\"000000000001\"," "\"000000000001\",")
                                        "")
                             (mapconcat 'identity
                                        (cl-subseq
                                         '("\"000000000000\"," "\"000000000000\"," "\"000000000000\"," "\"000000000000\"," "\"000000000000\"," "\"000000000000\",")
                                         0 pattern-height-2x)
                                        "")
                             nil nil nil "};")))))))))



