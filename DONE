
Subject: Can't open gzipped files from tar archives

cd /tmp

echo "test" | gzip > test.gz
zip test.zip test.gz
C-x C-f test.zip RET
RET  ; (archive-extract)

File content is nicely displayed ungzipped from zip archive.

echo "test" | gzip > test.gz
tar zcvf test.tar.gz test.gz
C-x C-f test.tar.gz RET
RET  ; (tar-extract)

Garbage is displayed instead of ungzipped file content.

(qv "/home/juri/src/emacs/emacs-mirror/emacs/lisp/arc-mode.el"
    "^[ 	]*(archive-try-jka-compr)     ;Pretty ugly hack :-($")

It still doesn't support Unicode.


Subject: flymake-start-on-save-buffer has no effect

I have flymake-start-on-save-buffer set to t to check syntax
only when a buffer is saved, but it still checks the unfinished work
while edits are in progress showing the errors that make no sense
until the buffer is saved, even when flymake-start-syntax-check-on-newline
and flymake-start-on-flymake-mode are nil.

(setq flymake-no-changes-timeout nil)

It still starts flymake on yanking text that contains newlines.
I had to reset also flymake-start-syntax-check-on-newline to nil.


C-x v g
a

Debugger entered--Lisp error: (error "Invalid argument to vc-annotate-warp-revision")
  signal(error ("Invalid argument to vc-annotate-warp-revision"))
  error("Invalid argument to vc-annotate-warp-revision")
  vc-annotate-warp-revision(nil "/home/juri/src/social/pleroma/https/pleroma-fe/src...")
  (if (not rev-at-line) (message "Cannot extract revision number from the current li...") (setq prev-rev (vc-call-backend vc-annotate-backend 'previous-revision fname rev)) (vc-annotate-warp-revision prev-rev fname))
  (let* ((rev-at-line (vc-annotate-extract-revision-at-line)) (prev-rev nil) (rev (car rev-at-line)) (fname (cdr rev-at-line))) (if (not rev-at-line) (message "Cannot extract revision number from the current li...") (setq prev-rev (vc-call-backend vc-annotate-backend 'previous-revision fname rev)) (vc-annotate-warp-revision prev-rev fname)))
  (if (not (equal major-mode 'vc-annotate-mode)) (message "Cannot be invoked outside of a vc annotate buffer") (let* ((rev-at-line (vc-annotate-extract-revision-at-line)) (prev-rev nil) (rev (car rev-at-line)) (fname (cdr rev-at-line))) (if (not rev-at-line) (message "Cannot extract revision number from the current li...") (setq prev-rev (vc-call-backend vc-annotate-backend 'previous-revision fname rev)) (vc-annotate-warp-revision prev-rev fname))))
  vc-annotate-revision-previous-to-line()
  funcall-interactively(vc-annotate-revision-previous-to-line)
  call-interactively(vc-annotate-revision-previous-to-line nil nil)
  command-execute(vc-annotate-revision-previous-to-line)


It seems ~/.emacs.d/elpa/yaml-mode-20180409.607 font-lock is broken
tested on /home/juri/gitlab/harid/harid/config/locales/et.yml

Debugger entered--Lisp error: (error "No match 1 in highlight (1 font-lock-variable-name-face)")
  signal(error ("No match 1 in highlight (1 font-lock-variable-name-face)"))
  error("No match %d in highlight %S" 1 (1 font-lock-variable-name-face))
  font-lock-fontify-keywords-region(3873 3894 nil)
  font-lock-default-fontify-region(3873 3893 nil)
  font-lock-fontify-region(3873 3893)
  #f(compiled-function (fun) #<bytecode 0x44d827d>)(font-lock-fontify-region)
  run-hook-wrapped(#f(compiled-function (fun) #<bytecode 0x44d827d>) font-lock-fontify-region)
  jit-lock--run-functions(3873 3893)
  jit-lock-fontify-now(3873 3893)
  font-lock-ensure(3873 3893)
  occur-engine-line(3873 3893 t)
  occur-engine(#("\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḙḛẹẻẽₑℯⅇⓔｅ𝐞𝑒𝒆..." 0 308 (isearch-string "errors" isearch-regexp-function-descr "")) (#<buffer et.yml>) #<buffer *Occur*> 0 t header-line shadow match t)
  occur-1(#("\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḙḛẹẻẽₑℯⅇⓔｅ𝐞𝑒𝒆..." 0 308 (isearch-string "errors" isearch-regexp-function-descr "")) nil (#<buffer et.yml>))
  occur(#("\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḙḛẹẻẽₑℯⅇⓔｅ𝐞𝑒𝒆..." 0 308 (isearch-string "errors" isearch-regexp-function-descr "")) nil nil)
  isearch-occur("\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḙḛẹẻẽₑℯⅇⓔｅ𝐞𝑒𝒆..." nil)
  funcall-interactively(isearch-occur "\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḙḛẹẻẽₑℯⅇⓔｅ𝐞𝑒𝒆..." nil)
  call-interactively(isearch-occur nil nil)
  command-execute(isearch-occur)


;; xrandr -q
;; Screen 0: minimum 320 x 200, current 4480 x 1456, maximum 8192 x 8192
;; eDP-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 309mm x 174mm
;; DP-2-2 connected 2560x1440+1920+16 (normal left inverted right x axis y axis) 597mm x 336mm

;; (message "monitor-geometry: %S" monitor-geometry)
;; (message "frame-geometry: %S" frame-geometry)
;; (message "frame-geometry-in-pixels: %S" frame-geometry-in-pixels)
;; ((height . 1080) (width . 1920) (top . 0) (left . 0))
;; (setq frame-geometry '((height . (text-pixels . 1080)) (width . (text-pixels . 1920)) (top . 0) (left . 0)))
;; (undecorated . t)
;; (fullscreen . maximized)


